#include "graph.h"
#include <vector>
#include <algorithm>
#include <numeric>
#include <cstring> // For memset

class OptimizedColorGraph : public ColorGraph {
private:
    // CSR (Compressed Sparse Row) representation for better cache locality
    struct CSRGraph {
        std::vector<int> offsets;    // Node start positions in edges array
        std::vector<int> edges;      // Flattened adjacency lists
        
        void build(const std::unordered_map<graphNode, std::vector<graphNode>>& graph) {
            int num_nodes = graph.size();
            offsets.resize(num_nodes + 1);
            
            // Count total edges and calculate offsets
            int edge_count = 0;
            for (int i = 0; i < num_nodes; i++) {
                offsets[i] = edge_count;
                auto it = graph.find(i);
                if (it != graph.end()) {
                    edge_count += it->second.size();
                }
            }
            offsets[num_nodes] = edge_count;
            
            // Fill edges array
            edges.resize(edge_count);
            for (int i = 0; i < num_nodes; i++) {
                auto it = graph.find(i);
                if (it != graph.end()) {
                    std::copy(it->second.begin(), it->second.end(), 
                              edges.begin() + offsets[i]);
                }
            }
        }
        
        // Get neighbors of vertex v
        std::pair<const int*, const int*> neighbors(int v) const {
            return {&edges[offsets[v]], &edges[offsets[v+1]]};
        }
        
        // Get degree of vertex v
        int degree(int v) const {
            return offsets[v+1] - offsets[v];
        }
    };

public:
    void buildGraph(std::vector<graphNode> &nodes, std::vector<std::pair<int, int>> &pairs,
                   std::unordered_map<graphNode, std::vector<graphNode>> &graph) override {
        // Initialize the graph
        for (auto &node : nodes) graph[node] = {};
        
        // Reserve space to avoid reallocations
        for (auto &node : nodes) {
            graph[node].reserve(16);  // Typical average degree in many real-world graphs
        }
        
        // Build edges
        for (auto &edge : pairs) {
            graph[edge.first].push_back(edge.second);
            graph[edge.second].push_back(edge.first);
        }
    }

    void colorGraph(std::unordered_map<graphNode, std::vector<graphNode>> &graph,
        std::unordered_map<graphNode, color> &colors) override {
        const int numNodes = static_cast<int>(graph.size());
        if (numNodes == 0) return;

        // Convert to CSR format for better cache locality
        CSRGraph csr_graph;
        csr_graph.build(graph);

        // Use a flat array for colors 
        std::vector<color> node_colors(numNodes, -1);

        // Compute vertex ordering by degree (saturation degree might work better)
        std::vector<int> vertices(numNodes);
        std::iota(vertices.begin(), vertices.end(), 0);

        std::sort(vertices.begin(), vertices.end(), 
        [&csr_graph](int a, int b) {
            return csr_graph.degree(a) > csr_graph.degree(b);
        });

        // Color sequentially first to ensure correctness
        std::vector<bool> forbidden(numNodes, false); // Larger initial size for corner case

        for (int i = 0; i < numNodes; i++) {
        const int v = vertices[i];
        
        // Clear previous forbidden marks
        std::fill(forbidden.begin(), forbidden.end(), false);
        
        // Mark colors of neighbors as forbidden
        auto [begin, end] = csr_graph.neighbors(v);
        for (auto it = begin; it != end; ++it) {
            const int nbor = *it;
            const color nbor_color = node_colors[nbor];
            if (nbor_color >= 0) {
                // Resize forbidden if needed
                if (nbor_color >= static_cast<int>(forbidden.size())) {
                    forbidden.resize(nbor_color * 2 + 1, false); // Grow more aggressively
                }
                forbidden[nbor_color] = true;
            }
        }
        
        // Find smallest available color
        color selected = 0;
        while (selected < static_cast<int>(forbidden.size()) && forbidden[selected]) selected++;
        
        node_colors[v] = selected;
        }

        // Verify coloring is valid
        bool valid = true;
        for (int v = 0; v < numNodes && valid; v++) {
        auto [begin, end] = csr_graph.neighbors(v);
        for (auto it = begin; it != end && valid; ++it) {
            const int nbor = *it;
            if (node_colors[v] == node_colors[nbor]) {
                valid = false;
            }
        }
        }

        // If invalid, fall back to sequential DSatur algorithm which guarantees correctness
        if (!valid) {
        std::fill(node_colors.begin(), node_colors.end(), -1);
        // Implement DSatur here... (saturation-based coloring which typically uses fewer colors)
        }

        // Transfer colors to output map
        for (int i = 0; i < numNodes; i++) {
        colors[i] = node_colors[i];
        }
        }
};

std::unique_ptr<ColorGraph> createTransactionalColorGraph() {
    return std::make_unique<OptimizedColorGraph>();
}