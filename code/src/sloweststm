#include "stm-coloring.h"
#include <algorithm>
#include <string.h>
#include <iostream>
#include <memory>
#include <queue>
#include <vector>
#include <unordered_set>
#include <atomic>

// Thread-local storage for color arrays to avoid stack overflow
thread_local bool* forbidden_colors = nullptr;

// Initialize thread-local storage
void initThreadLocalStorage() {
    if (forbidden_colors == nullptr) {
        forbidden_colors = new bool[MAX_COLORS]();
    }
}

// Cleanup thread-local storage (call at program exit)
void cleanupThreadLocalStorage() {
    if (forbidden_colors != nullptr) {
        delete[] forbidden_colors;
        forbidden_colors = nullptr;
    }
}

// Constructor
STMColorGraph::STMColorGraph(STMType type, int iterations, bool try_bipartite) 
    : stm_type(type),
      max_iterations(iterations), 
      detect_bipartite(try_bipartite),
      global_max_color(0) {
    
    // Initialize thread-local storage
    initThreadLocalStorage();
    
    const char* type_names[] = {"LibITM", "TL2"};
    std::cout << "STM Graph Coloring (" << type_names[static_cast<int>(type)] << ")\n";
    std::cout << "Max iterations: " << max_iterations << "\n";
    std::cout << "Bipartite detection: " << (detect_bipartite ? "enabled" : "disabled") << "\n";
}

// Destructor
STMColorGraph::~STMColorGraph() {
    // Cleanup is not called here as it might be too early
    // Use atexit(cleanupThreadLocalStorage) in main instead
}

// Common implementation for buildGraph
void STMColorGraph::buildGraph(
    std::vector<graphNode> &nodes,
    std::vector<std::pair<graphNode, graphNode>> &pairs,
    std::unordered_map<graphNode, std::vector<graphNode>> &graph) {
    
    std::cout << "Building graph..." << std::endl;
    
    // Clear the graph
    graph.clear();
    
    // Initialize graph with all nodes
    for (auto node : nodes) {
        graph[node]; // Create an empty adjacency list for each node
    }
    
    // Add edges
    for (auto& edge : pairs) {
        // Validate edge indices
        if (edge.first < 0 || edge.second < 0) {
            continue;
        }
        
        if (edge.first == edge.second) {
            continue;
        }
        
        // Check for duplicate edges (using a simpler approach)
        auto& neighbors = graph[edge.first];
        if (std::find(neighbors.begin(), neighbors.end(), edge.second) == neighbors.end()) {
            graph[edge.first].push_back(edge.second);
            graph[edge.second].push_back(edge.first);
        }
    }
    
    // Print some statistics
    std::cout << "Graph built: " << graph.size() << " nodes" << std::endl;
    
    // Count edges
    size_t total_edges = 0;
    for (const auto& adj_list : graph) {
        total_edges += adj_list.second.size();
    }
    std::cout << "Total edges: " << (total_edges / 2) << std::endl;
}

// Simple sequential coloring implementation that works for all STM types
// void STMColorGraph::colorGraph(
//     std::unordered_map<graphNode, std::vector<graphNode>> &graph,
//     std::unordered_map<graphNode, color> &colors) {
    
//     std::cout << "Starting graph coloring..." << std::endl;
    
//     // Clear output colors
//     colors.clear();
    
//     // Check if graph is empty
//     if (graph.empty()) {
//         std::cout << "Empty graph, nothing to color." << std::endl;
//         return;
//     }
    
//     // Try to detect complete graph
//     bool is_complete = true;
//     size_t expected_neighbors = graph.size() - 1;
//     for (const auto& entry : graph) {
//         if (entry.second.size() != expected_neighbors) {
//             is_complete = false;
//             break;
//         }
//     }
    
//     // For complete graphs, use optimal coloring
//     if (is_complete && graph.size() > 1) {
//         std::cout << "Using optimal coloring for complete graph..." << std::endl;
        
//         // For complete graph with n nodes, we need n colors
//         int color_idx = 0;
//         for (const auto& entry : graph) {
//             colors[entry.first] = color_idx++;
//         }
        
//         global_max_color = graph.size() - 1;
//         std::cout << "Complete graph colored with " << (global_max_color + 1) << " colors." << std::endl;
//         return;
//     }
    
//     // Try to detect bipartite graph if enabled
//     if (detect_bipartite) {
//         std::cout << "Checking if graph is bipartite..." << std::endl;
        
//         // Initialize coloring with -1 (uncolored)
//         std::unordered_map<graphNode, int> bipartite_colors;
//         for (const auto& entry : graph) {
//             bipartite_colors[entry.first] = -1;
//         }
        
//         // Start BFS from first node
//         bool is_bipartite = true;
//         if (!graph.empty()) {
//             graphNode start_node = graph.begin()->first;
//             bipartite_colors[start_node] = 0;
            
//             std::queue<graphNode> q;
//             q.push(start_node);
            
//             while (!q.empty() && is_bipartite) {
//                 graphNode u = q.front();
//                 q.pop();
                
//                 for (const auto& v : graph[u]) {
//                     if (bipartite_colors[v] == -1) {
//                         bipartite_colors[v] = 1 - bipartite_colors[u];
//                         q.push(v);
//                     } else if (bipartite_colors[v] == bipartite_colors[u]) {
//                         is_bipartite = false;
//                         break;
//                     }
//                 }
//             }
//         }
        
//         // If bipartite, use 2-coloring
//         if (is_bipartite) {
//             std::cout << "Graph is bipartite, using 2-coloring..." << std::endl;
//             colors = bipartite_colors;
//             global_max_color = 1;
//             std::cout << "Bipartite graph colored with 2 colors." << std::endl;
//             return;
//         }
//     }
    
//     // Create a vector of nodes sorted by degree (descending)
//     std::vector<graphNode> ordered_nodes;
//     ordered_nodes.reserve(graph.size());
    
//     for (const auto& entry : graph) {
//         ordered_nodes.push_back(entry.first);
//     }
    
//     // Sort by degree (number of neighbors)
//     std::sort(ordered_nodes.begin(), ordered_nodes.end(),
//         [&graph](graphNode a, graphNode b) {
//             return graph[a].size() > graph[b].size();
//         });
    
//     // Initialize colors to -1 (uncolored)
//     for (const auto& node : ordered_nodes) {
//         colors[node] = -1;
//     }
    
//     // Create per-node mutex and version flags
//     std::vector<std::mutex> node_mutexes(ordered_nodes.size());
//     std::vector<std::atomic<int>> node_versions(ordered_nodes.size());
    
//     // Create mapping from node to index
//     std::unordered_map<graphNode, size_t> node_indices;
//     for (size_t i = 0; i < ordered_nodes.size(); i++) {
//         node_indices[ordered_nodes[i]] = i;
//         node_versions[i] = 0; // 0 = uncolored, 1 = tentative, 2 = final
//     }
    
//     // Main coloring algorithm 
//     bool has_conflicts = true;
//     int iterations = 0;
    
//     while (has_conflicts && iterations < max_iterations) {
//         std::cout << "Iteration " << (iterations + 1) << "..." << std::endl;
//         has_conflicts = false;
        
//         // Phase 1: Optimistic coloring
//         #pragma omp parallel for
//         for (size_t i = 0; i < ordered_nodes.size(); i++) {
//             graphNode node = ordered_nodes[i];
//             size_t node_idx = node_indices[node];
            
//             // Skip already colored nodes
//             if (node_versions[node_idx] > 0) {
//                 continue;
//             }
            
//             // Clear forbidden colors
//             bool* local_forbidden = new bool[MAX_COLORS]();
            
//             // Different approaches based on STM type
//             if (stm_type == STMType::Libitm || stm_type == STMType::TL2 || 
//                 (stm_type == STMType::Hybrid && graph[node].size() > 5)) {
                
//                 // Collect neighbor colors outside transaction
//                 std::vector<color> neighbor_colors;
                
//                 for (const auto& neighbor : graph[node]) {
//                     size_t nbor_idx = node_indices[neighbor];
//                     if (node_versions[nbor_idx] > 0) {
//                         // Extract color under lock to be safe
//                         std::lock_guard<std::mutex> lock(node_mutexes[nbor_idx]);
//                         neighbor_colors.push_back(colors[neighbor]);
//                     }
//                 }
                
//                 // Now use STM for the actual coloring decision
//                 __transaction_relaxed {
//                     // Mark colors as forbidden
//                     for (color c : neighbor_colors) {
//                         if (c >= 0 && c < MAX_COLORS) {
//                             local_forbidden[c] = true;
//                         }
//                     }
                    
//                     // Find smallest available color
//                     color selected = 0;
//                     while (selected < MAX_COLORS && local_forbidden[selected]) {
//                         selected++;
//                     }
                    
//                     // Lock to update data structures
//                     std::lock_guard<std::mutex> lock(node_mutexes[node_idx]);
                    
//                     // Only color if still uncolored
//                     if (node_versions[node_idx] == 0) {
//                         colors[node] = selected;
//                         node_versions[node_idx] = 1; // Mark as tentatively colored
                        
//                         // Update global max color
//                         #pragma omp critical
//                         {
//                             if (selected > global_max_color) {
//                                 global_max_color = selected;
//                             }
//                         }
//                     }
//                 }
//             } else {
//                 // TMGraph or Hybrid with low degree - use only locking
//                 std::lock_guard<std::mutex> lock(node_mutexes[node_idx]);
                
//                 // Skip if colored by another thread
//                 if (node_versions[node_idx] > 0) {
//                     delete[] local_forbidden;
//                     continue;
//                 }
                
//                 // Mark colors of neighbors as forbidden
//                 for (const auto& neighbor : graph[node]) {
//                     size_t nbor_idx = node_indices[neighbor];
//                     if (node_versions[nbor_idx] > 0) {
//                         color c = colors[neighbor];
//                         if (c >= 0 && c < MAX_COLORS) {
//                             local_forbidden[c] = true;
//                         }
//                     }
//                 }
                
//                 // Find first available color
//                 color selected = 0;
//                 while (selected < MAX_COLORS && local_forbidden[selected]) {
//                     selected++;
//                 }
                
//                 // Assign color
//                 colors[node] = selected;
//                 node_versions[node_idx] = 1; // Mark as tentatively colored
                
//                 // Update max color
//                 #pragma omp critical
//                 {
//                     if (selected > global_max_color) {
//                         global_max_color = selected;
//                     }
//                 }
//             }
            
//             delete[] local_forbidden;
//         }
        
//         // Phase 2: Detect conflicts
//         std::vector<std::pair<graphNode, graphNode>> conflicts;
        
//         for (const auto& entry : graph) {
//             graphNode node = entry.first;
//             size_t node_idx = node_indices[node];
            
//             // Skip nodes that aren't tentatively colored
//             if (node_versions[node_idx] != 1) {
//                 continue;
//             }
            
//             for (const auto& neighbor : entry.second) {
//                 size_t nbor_idx = node_indices[neighbor];
                
//                 // Check for conflict (both tentatively colored with same color)
//                 if (node_versions[nbor_idx] == 1 && colors[node] == colors[neighbor]) {
//                     // Only record conflict once (lower index first)
//                     if (node_idx < nbor_idx) {
//                         conflicts.push_back(std::make_pair(node, neighbor));
//                     }
//                     has_conflicts = true;
//                 }
//             }
//         }
        
//         // Phase 3: Mark committed nodes 
//         #pragma omp parallel for
//         for (size_t i = 0; i < ordered_nodes.size(); i++) {
//             graphNode node = ordered_nodes[i];
//             size_t node_idx = node_indices[node];
            
//             // Only process tentatively colored nodes
//             if (node_versions[node_idx] == 1) {
//                 bool in_conflict = false;
                
//                 // Check if this node is in a conflict
//                 for (const auto& conflict : conflicts) {
//                     if (conflict.first == node || conflict.second == node) {
//                         in_conflict = true;
//                         break;
//                     }
//                 }
                
//                 if (in_conflict) {
//                     // Reset node if in conflict
//                     std::lock_guard<std::mutex> lock(node_mutexes[node_idx]);
//                     node_versions[node_idx] = 0;
//                     colors[node] = -1;
//                 } else {
//                     // Mark as committed if not in conflict
//                     std::lock_guard<std::mutex> lock(node_mutexes[node_idx]);
//                     node_versions[node_idx] = 2;
//                 }
//             }
//         }
        
//         iterations++;
//     }
    
//     // Final pass for any uncolored nodes (in case we hit max iterations)
//     for (size_t i = 0; i < ordered_nodes.size(); i++) {
//         graphNode node = ordered_nodes[i];
//         size_t node_idx = node_indices[node];
        
//         // Skip already colored nodes
//         if (node_versions[node_idx] == 2) {
//             continue;
//         }
        
//         // Reset thread-local array
//         memset(forbidden_colors, 0, MAX_COLORS * sizeof(bool));
        
//         // Lock this node
//         std::lock_guard<std::mutex> lock(node_mutexes[node_idx]);
        
//         // Mark colors of committed neighbors as forbidden
//         for (const auto& neighbor : graph[node]) {
//             size_t nbor_idx = node_indices[neighbor];
//             if (node_versions[nbor_idx] == 2) {
//                 color c = colors[neighbor];
//                 if (c >= 0 && c < MAX_COLORS) {
//                     forbidden_colors[c] = true;
//                 }
//             }
//         }
        
//         // Find first available color
//         color selected = 0;
//         while (selected < MAX_COLORS && forbidden_colors[selected]) {
//             selected++;
//         }
        
//         // Assign color
//         colors[node] = selected;
//         node_versions[node_idx] = 2;
        
//         // Update max color
//         if (selected > global_max_color) {
//             global_max_color = selected;
//         }
//     }
    
//     // Final verification
//     int conflict_count = 0;
//     for (const auto& entry : graph) {
//         graphNode node = entry.first;
//         color node_color = colors[node];
        
//         for (const auto& neighbor : entry.second) {
//             if (colors[neighbor] == node_color) {
//                 if (conflict_count < 10) {
//                     std::cout << "Conflict: Node " << node << " and neighbor "
//                               << neighbor << " both have color " << node_color << std::endl;
//                 }
//                 conflict_count++;
//             }
//         }
//     }
    
//     if (conflict_count > 0) {
//         std::cout << "ERROR: Total conflicts found: " << conflict_count << std::endl;
//     } else {
//         std::cout << "Coloring verification passed: No conflicts found." << std::endl;
//     }
    
//     std::cout << "Used " << (global_max_color + 1) << " colors." << std::endl;
// }


// STMColorGraph::colorGraph optimized for full STM usage
void STMColorGraph::colorGraph(
    std::unordered_map<graphNode, std::vector<graphNode>> &graph,
    std::unordered_map<graphNode, color> &colors)
{
    std::cout << "Starting graph coloring (STM-optimized)..." << std::endl;
    colors.clear();

    if (graph.empty()) {
        std::cout << "Empty graph, nothing to color." << std::endl;
        return;
    }

    // Complete graph detection
    bool is_complete = true;
    size_t expected_neighbors = graph.size() - 1;
    for (const auto &entry : graph) {
        if (entry.second.size() != expected_neighbors) {
            is_complete = false;
            break;
        }
    }
    if (is_complete && graph.size() > 1) {
        int color_idx = 0;
        for (const auto &entry : graph) {
            colors[entry.first] = color_idx++;
        }
        global_max_color = graph.size() - 1;
        std::cout << "Complete graph colored with " << (global_max_color + 1) << " colors." << std::endl;
        return;
    }

    // Bipartite detection (optional)
    if (detect_bipartite) {
        std::unordered_map<graphNode, int> bipartite_colors;
        for (const auto &entry : graph) bipartite_colors[entry.first] = -1;
        bool is_bipartite = true;
        if (!graph.empty()) {
            graphNode start_node = graph.begin()->first;
            bipartite_colors[start_node] = 0;
            std::queue<graphNode> q;
            q.push(start_node);
            while (!q.empty() && is_bipartite) {
                graphNode u = q.front(); q.pop();
                for (const auto &v : graph[u]) {
                    if (bipartite_colors[v] == -1) {
                        bipartite_colors[v] = 1 - bipartite_colors[u];
                        q.push(v);
                    } else if (bipartite_colors[v] == bipartite_colors[u]) {
                        is_bipartite = false;
                        break;
                    }
                }
            }
        }
        if (is_bipartite) {
            for (const auto &kv : bipartite_colors) colors[kv.first] = kv.second;
            global_max_color = 1;
            std::cout << "Bipartite graph colored with 2 colors." << std::endl;
            return;
        }
    }

    // Prepare node ordering and indices
    std::vector<graphNode> ordered_nodes;
    ordered_nodes.reserve(graph.size());
    for (const auto &entry : graph) ordered_nodes.push_back(entry.first);
    std::sort(ordered_nodes.begin(), ordered_nodes.end(),
              [&graph](graphNode a, graphNode b) {
                  return graph[a].size() > graph[b].size();
              });

    // Per-node color and version (0=uncolored, 1=tentative, 2=final)
    std::unordered_map<graphNode, color> local_colors;
    std::unordered_map<graphNode, std::atomic<int>> node_versions;
    for (const auto &node : ordered_nodes) {
        local_colors[node] = -1;
        node_versions[node] = 0;
    }
    std::atomic<int> local_max_color(0);

    // Main coloring loop
    bool has_conflicts = true;
    int iterations = 0;
    while (has_conflicts && iterations < max_iterations) {
        has_conflicts = false;

        // PHASE 1: Parallel tentative coloring (STM only)
        #pragma omp parallel for schedule(dynamic)
        for (size_t i = 0; i < ordered_nodes.size(); ++i) {
            graphNode node = ordered_nodes[i];
            if (node_versions[node] > 0) continue;

            __transaction_relaxed {
                bool forbidden[MAX_COLORS] = {false};
                for (const auto &neighbor : graph[node]) {
                    if (node_versions[neighbor] > 0) {
                        color c = local_colors[neighbor];
                        if (c >= 0 && c < MAX_COLORS) forbidden[c] = true;
                    }
                }
                color selected = 0;
                while (selected < MAX_COLORS && forbidden[selected]) ++selected;
                if (node_versions[node] == 0) {
                    local_colors[node] = selected;
                    node_versions[node] = 1;
                    int prev = local_max_color;
                    while (selected > prev && !local_max_color.compare_exchange_weak(prev, selected));
                }
            }
        }

        // PHASE 2: Conflict detection
        std::vector<graphNode> conflicted_nodes;
        #pragma omp parallel for schedule(dynamic)
        for (size_t i = 0; i < ordered_nodes.size(); ++i) {
            graphNode node = ordered_nodes[i];
            if (node_versions[node] != 1) continue;
            color my_color = local_colors[node];
            bool conflict = false;
            for (const auto &neighbor : graph[node]) {
                if (node_versions[neighbor] == 1 && local_colors[neighbor] == my_color && node < neighbor) {
                    conflict = true;
                    break;
                }
            }
            if (conflict) {
                #pragma omp critical
                conflicted_nodes.push_back(node);
                has_conflicts = true;
            }
        }

        // PHASE 3: Commit or reset colors (STM only)
        #pragma omp parallel for schedule(dynamic)
        for (size_t i = 0; i < ordered_nodes.size(); ++i) {
            graphNode node = ordered_nodes[i];
            if (node_versions[node] != 1) continue;
            __transaction_relaxed {
                if (std::find(conflicted_nodes.begin(), conflicted_nodes.end(), node) != conflicted_nodes.end()) {
                    local_colors[node] = -1;
                    node_versions[node] = 0;
                } else {
                    node_versions[node] = 2;
                }
            }
        }
        ++iterations;
    }

    // FINAL PASS: Color any remaining uncolored nodes (STM only)
    #pragma omp parallel for schedule(dynamic)
    for (size_t i = 0; i < ordered_nodes.size(); ++i) {
        graphNode node = ordered_nodes[i];
        if (node_versions[node] == 2) continue;
        __transaction_relaxed {
            bool forbidden[MAX_COLORS] = {false};
            for (const auto &neighbor : graph[node]) {
                if (node_versions[neighbor] == 2) {
                    color c = local_colors[neighbor];
                    if (c >= 0 && c < MAX_COLORS) forbidden[c] = true;
                }
            }
            color selected = 0;
            while (selected < MAX_COLORS && forbidden[selected]) ++selected;
            local_colors[node] = selected;
            node_versions[node] = 2;
            int prev = local_max_color;
            while (selected > prev && !local_max_color.compare_exchange_weak(prev, selected));
        }
    }

    // Copy results to output
    colors = local_colors;
    global_max_color = local_max_color;

    // Verification
    int conflict_count = 0;
    for (const auto &entry : graph) {
        graphNode node = entry.first;
        color node_color = colors[node];
        for (const auto &neighbor : entry.second) {
            if (colors[neighbor] == node_color && node < neighbor) {
                if (conflict_count < 10)
                    std::cout << "Conflict: " << node << " and " << neighbor << " both colored " << node_color << "\n";
                ++conflict_count;
            }
        }
    }
    if (conflict_count == 0)
        std::cout << "Coloring valid. Used " << (global_max_color + 1) << " colors." << std::endl;
    else
        std::cout << "Coloring has " << conflict_count << " conflicts." << std::endl;
}

// LibITM Implementation 
LibITMColorGraph::LibITMColorGraph(int iterations, bool try_bipartite)
    : STMColorGraph(STMType::Libitm, iterations, try_bipartite) {}

void LibITMColorGraph::optimisticColoring(
    size_t vertex,
    const std::vector<std::vector<graphNode>> &neighbors,
    std::vector<VertexData> &vertex_data) {
    // Not directly used - see colorGraph implementation
}

bool LibITMColorGraph::detectConflicts(
    const std::vector<std::vector<graphNode>> &neighbors,
    std::vector<VertexData> &vertex_data) {
    // Not directly used - see colorGraph implementation
    return false;
}

void LibITMColorGraph::resolveConflicts(
    const std::vector<std::vector<graphNode>> &neighbors,
    std::vector<VertexData> &vertex_data) {
    // Not directly used - see colorGraph implementation
}

// TL2 Implementation 
TL2ColorGraph::TL2ColorGraph(int iterations, bool try_bipartite)
    : STMColorGraph(STMType::TL2, iterations, try_bipartite) {}

void TL2ColorGraph::optimisticColoring(
    size_t vertex,
    const std::vector<std::vector<graphNode>> &neighbors,
    std::vector<VertexData> &vertex_data) {
    // Not directly used - see colorGraph implementation
}

bool TL2ColorGraph::detectConflicts(
    const std::vector<std::vector<graphNode>> &neighbors,
    std::vector<VertexData> &vertex_data) {
    // Not directly used - see colorGraph implementation
    return false;
}

void TL2ColorGraph::resolveConflicts(
    const std::vector<std::vector<graphNode>> &neighbors,
    std::vector<VertexData> &vertex_data) {
    // Not directly used - see colorGraph implementation
}


// Factory function
std::unique_ptr<ColorGraph> createSTMColorGraph(const char* stm_type, int iterations, bool try_bipartite) {
    // Register cleanup function
    static bool registered = false;
    if (!registered) {
        std::atexit(cleanupThreadLocalStorage);
        registered = true;
    }
    
    if (strcmp(stm_type, "tl2") == 0) {
        return std::unique_ptr<ColorGraph>(new TL2ColorGraph(iterations, try_bipartite));
    }else {
        return std::unique_ptr<ColorGraph>(new LibITMColorGraph(iterations, try_bipartite)); // Default
    }
}